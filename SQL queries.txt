# tworzenie tabeli - CREATE TABLE

  CREATE TABLE Heroes (id int, name varchar(25), siblings int);


# wstawianie wierszy - INSERT INTO ...() VALUES ()

  INSERT INTO Heroes VALUES (1, 'Harry Potter', 0);
  (wstawianie bez podawania nazw kolumn)

  INSERT INTO Heroes (id, name, siblings) VALUES (2, 'Ron Weasley', 6);


# wybieranie/wyświetlanie danych - SELECT ... FROM ...

  SELECT * FROM Heroes;  (zapytanie wyświetlające wszystkie kolumny)

  SELECT * FROM Categories;

  SELECT name FROM Heroes; (wyświetla konkretne kolumny - "name")
  SELECT CategoryName, Description FROM Categories; (kilka kolumn)


# sortowanie - ORDER BY

  SELECT CategoryName, Description FROM Categories ORDER BY CategoryName DESC;
  (domyślnie dane sortowane są rosnąco – ASC, można też posortować malejąco – DESC)


# klauzula WHERE

  SELECT * FROM Heroes WHERE siblings = 2;
  (wybiera te wiersze, które zawierają w kolumnie odpowiednią wartość)

  SELECT * FROM Heroes WHERE (id % 2) = 0;
  (wszystkie postacie, których identyfikator jest parzysty)


# operatory AND/OR - wiersze spełniające więcej niż jeden warunek

  (produkty, które są słodyczami (kategoria 3) oraz ich cena jest wyższa niż 40)
  SELECT * FROM Products WHERE CategoryID = 3;
  SELECT * FROM Products WHERE Price > 40;
  SELECT * FROM Products WHERE CategoryID = 3 AND Price > 40; (razem)


# operatory IN / BETWEEN / LIKE

  IN (wartość1, wartość2) – porównuje kolumnę z wieloma możliwymi wartościami. Zwróci wartość true,
  jeśli uda się dopasować chociaż jedną wartość.
  BETWEEN – sprawdza, czy wartość mieści się w zadanym zakresie (i NOT BETWEEN)
  LIKE – wyszukuje określony wzorzec

  SELECT * FROM Products WHERE CategoryID IN (2,3); (produkty będące przyprawą lub słodyczami)
  SELECT * FROM Products WHERE Price BETWEEN 20 AND 50; (cena między 20 a 50)
  SELECT * FROM Products WHERE ProductName LIKE 'Cha%'; (wyrazy rozpoczynające się od "Cha")
  SELECT * FROM Products WHERE ProductName LIKE '%art%'; (wyrazy mające w środku słowo "art")

# funkcje

  COUNT() – zlicza liczbę wierszy
  SUM() – zwraca całkowitą sumę wartości w danej kolumnie liczbowe
  AVG() – zwraca średnią z wartości
  MIN() / MAX() – zwraca najmniejszą / największą wartość

  SELECT COUNT(*) FROM Products; (wszystkie produkty w bazie)
  SELECT MAX(Price) FROM Products; (najdroższy produkt)

# zagnieżdżenia

  SELECT ProductName, Unit FROM Products;
  SELECT MIN(Price) FROM Products;

  SELECT ProductName, Unit
  FROM Products
  WHERE Price = (
    SELECT MIN(Price) FROM Products);

# łączenie tabeli

  SELECT Orders.OrderID, Orders.ShipperID, Customers.Country
  FROM Orders
  INNER JOIN Customers ON                    (wybranie kolumn z obu tabel)
  Orders.CustomerID = Customers.CustomerID;

  (INNER) JOIN – zwraca część wspólną dwóch tabel – tylko rekordy, które mają pasujące wartości w obu tabelach
  LEFT (OUTER) JOIN – zwraca wszystkie rekordy tabeli po lewej stronie operatora JOIN oraz rekordy dopasowane z prawej tabeli
  RIGHT (OUTER) JOIN – zwraca wszystkie rekordy tabeli po prawej stronie operatora JOIN oraz rekordy dopasowane z lewej tabeli
  FULL (OUTER) JOIN – zwraca wszystkie rekordy, gdy występuje dopasowanie w lewej lub prawej tabeli

# aliasy

  SELECT o.OrderID, o.ShipperID, c.Country
  FROM Orders AS o                   (AS jest opcjonalne)
  INNER JOIN Customers AS c
  ON o.CustomerID = c.CustomerID;

# aktualizowanie danych

  Aby zaktualizować wiersz w tabeli: UPDATE...SET...WHERE
  - Nazwę tabeli, w której dokonujemy zmian
  - Nowe wartości w kolumnach
  - Wiersze, które mają zostać zaktualizowane – wskazane za pomocą klauzuli WHERE

  Jeżeli pominiemy ostatni punkt – wskazanie wierszy do aktualizacji, to zmodyfikujemy wszystkie wiersze w tabeli (!)
  Chcemy zamienić akronim UK na pełną nazwę:

  UPDATE Customers
  SET COUNTRY = 'United Kingdom'
  WHERE Country = 'UK';

# usuwanie wierszy (DELETE – wybrać odpowiednią tabelę i wiersz)

  DELETE FROM Customers
  WHERE CustomerID = 2;
